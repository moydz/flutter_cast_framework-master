// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.gianlucaparadise.flutter_cast_framework;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PlatformBridgeApis {

  public enum StreamType {
    invalid(0),
    none(1),
    buffered(2),
    live(3);

    private int index;
    private StreamType(final int index) {
      this.index = index;
    }
  }

  public enum MediaType {
    generic(0),
    movie(1),
    tvShow(2),
    musicTrack(3),
    photo(4),
    audiobookChapter(5),
    user(6);

    private int index;
    private MediaType(final int index) {
      this.index = index;
    }
  }

  public enum MediaMetadataKey {
    albumArtist(0),
    albumTitle(1),
    artist(2),
    bookTitle(3),
    broadcastDate(4),
    chapterNumber(5),
    chapterTitle(6),
    composer(7),
    creationDate(8),
    discNumber(9),
    episodeNumber(10),
    height(11),
    locationLatitude(12),
    locationLongitude(13),
    locationName(14),
    queueItemId(15),
    releaseDate(16),
    seasonNumber(17),
    sectionDuration(18),
    sectionStartAbsoluteTime(19),
    sectionStartTimeInContainer(20),
    sectionStartTimeInMedia(21),
    seriesTitle(22),
    studio(23),
    subtitle(24),
    title(25),
    trackNumber(26),
    width(27);

    private int index;
    private MediaMetadataKey(final int index) {
      this.index = index;
    }
  }

  public enum TrackType {
    unknown(0),
    text(1),
    audio(2),
    video(3);

    private int index;
    private TrackType(final int index) {
      this.index = index;
    }
  }

  public enum TrackSubtype {
    unknown(0),
    none(1),
    subtitles(2),
    captions(3),
    descriptions(4),
    chapters(5),
    metadata(6);

    private int index;
    private TrackSubtype(final int index) {
      this.index = index;
    }
  }

  public enum PlayerState {
    unknown(0),
    idle(1),
    playing(2),
    paused(3),
    buffering(4),
    loading(5);

    private int index;
    private PlayerState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaLoadRequestData {
    private @Nullable Boolean shouldAutoplay;
    public @Nullable Boolean getShouldAutoplay() { return shouldAutoplay; }
    public void setShouldAutoplay(@Nullable Boolean setterArg) {
      this.shouldAutoplay = setterArg;
    }

    private @Nullable Long currentTime;
    public @Nullable Long getCurrentTime() { return currentTime; }
    public void setCurrentTime(@Nullable Long setterArg) {
      this.currentTime = setterArg;
    }

    private @Nullable MediaInfo mediaInfo;
    public @Nullable MediaInfo getMediaInfo() { return mediaInfo; }
    public void setMediaInfo(@Nullable MediaInfo setterArg) {
      this.mediaInfo = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean shouldAutoplay;
      public @NonNull Builder setShouldAutoplay(@Nullable Boolean setterArg) {
        this.shouldAutoplay = setterArg;
        return this;
      }
      private @Nullable Long currentTime;
      public @NonNull Builder setCurrentTime(@Nullable Long setterArg) {
        this.currentTime = setterArg;
        return this;
      }
      private @Nullable MediaInfo mediaInfo;
      public @NonNull Builder setMediaInfo(@Nullable MediaInfo setterArg) {
        this.mediaInfo = setterArg;
        return this;
      }
      public @NonNull MediaLoadRequestData build() {
        MediaLoadRequestData pigeonReturn = new MediaLoadRequestData();
        pigeonReturn.setShouldAutoplay(shouldAutoplay);
        pigeonReturn.setCurrentTime(currentTime);
        pigeonReturn.setMediaInfo(mediaInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("shouldAutoplay", shouldAutoplay);
      toMapResult.put("currentTime", currentTime);
      toMapResult.put("mediaInfo", (mediaInfo == null) ? null : mediaInfo.toMap());
      return toMapResult;
    }
    static @NonNull MediaLoadRequestData fromMap(@NonNull Map<String, Object> map) {
      MediaLoadRequestData pigeonResult = new MediaLoadRequestData();
      Object shouldAutoplay = map.get("shouldAutoplay");
      pigeonResult.setShouldAutoplay((Boolean)shouldAutoplay);
      Object currentTime = map.get("currentTime");
      pigeonResult.setCurrentTime((currentTime == null) ? null : ((currentTime instanceof Integer) ? (Integer)currentTime : (Long)currentTime));
      Object mediaInfo = map.get("mediaInfo");
      pigeonResult.setMediaInfo((mediaInfo == null) ? null : MediaInfo.fromMap((Map)mediaInfo));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaInfo {
    private @Nullable String contentId;
    public @Nullable String getContentId() { return contentId; }
    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable StreamType streamType;
    public @Nullable StreamType getStreamType() { return streamType; }
    public void setStreamType(@Nullable StreamType setterArg) {
      this.streamType = setterArg;
    }

    private @Nullable String contentType;
    public @Nullable String getContentType() { return contentType; }
    public void setContentType(@Nullable String setterArg) {
      this.contentType = setterArg;
    }

    private @Nullable MediaMetadata mediaMetadata;
    public @Nullable MediaMetadata getMediaMetadata() { return mediaMetadata; }
    public void setMediaMetadata(@Nullable MediaMetadata setterArg) {
      this.mediaMetadata = setterArg;
    }

    private @Nullable List<MediaTrack> mediaTracks;
    public @Nullable List<MediaTrack> getMediaTracks() { return mediaTracks; }
    public void setMediaTracks(@Nullable List<MediaTrack> setterArg) {
      this.mediaTracks = setterArg;
    }

    private @Nullable Long streamDuration;
    public @Nullable Long getStreamDuration() { return streamDuration; }
    public void setStreamDuration(@Nullable Long setterArg) {
      this.streamDuration = setterArg;
    }

    private @Nullable List<AdBreakClipInfo> adBreakClips;
    public @Nullable List<AdBreakClipInfo> getAdBreakClips() { return adBreakClips; }
    public void setAdBreakClips(@Nullable List<AdBreakClipInfo> setterArg) {
      this.adBreakClips = setterArg;
    }

    private @Nullable String customDataAsJson;
    public @Nullable String getCustomDataAsJson() { return customDataAsJson; }
    public void setCustomDataAsJson(@Nullable String setterArg) {
      this.customDataAsJson = setterArg;
    }

    public static final class Builder {
      private @Nullable String contentId;
      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }
      private @Nullable StreamType streamType;
      public @NonNull Builder setStreamType(@Nullable StreamType setterArg) {
        this.streamType = setterArg;
        return this;
      }
      private @Nullable String contentType;
      public @NonNull Builder setContentType(@Nullable String setterArg) {
        this.contentType = setterArg;
        return this;
      }
      private @Nullable MediaMetadata mediaMetadata;
      public @NonNull Builder setMediaMetadata(@Nullable MediaMetadata setterArg) {
        this.mediaMetadata = setterArg;
        return this;
      }
      private @Nullable List<MediaTrack> mediaTracks;
      public @NonNull Builder setMediaTracks(@Nullable List<MediaTrack> setterArg) {
        this.mediaTracks = setterArg;
        return this;
      }
      private @Nullable Long streamDuration;
      public @NonNull Builder setStreamDuration(@Nullable Long setterArg) {
        this.streamDuration = setterArg;
        return this;
      }
      private @Nullable List<AdBreakClipInfo> adBreakClips;
      public @NonNull Builder setAdBreakClips(@Nullable List<AdBreakClipInfo> setterArg) {
        this.adBreakClips = setterArg;
        return this;
      }
      private @Nullable String customDataAsJson;
      public @NonNull Builder setCustomDataAsJson(@Nullable String setterArg) {
        this.customDataAsJson = setterArg;
        return this;
      }
      public @NonNull MediaInfo build() {
        MediaInfo pigeonReturn = new MediaInfo();
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setStreamType(streamType);
        pigeonReturn.setContentType(contentType);
        pigeonReturn.setMediaMetadata(mediaMetadata);
        pigeonReturn.setMediaTracks(mediaTracks);
        pigeonReturn.setStreamDuration(streamDuration);
        pigeonReturn.setAdBreakClips(adBreakClips);
        pigeonReturn.setCustomDataAsJson(customDataAsJson);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("contentId", contentId);
      toMapResult.put("streamType", streamType == null ? null : streamType.index);
      toMapResult.put("contentType", contentType);
      toMapResult.put("mediaMetadata", (mediaMetadata == null) ? null : mediaMetadata.toMap());
      toMapResult.put("mediaTracks", mediaTracks);
      toMapResult.put("streamDuration", streamDuration);
      toMapResult.put("adBreakClips", adBreakClips);
      toMapResult.put("customDataAsJson", customDataAsJson);
      return toMapResult;
    }
    static @NonNull MediaInfo fromMap(@NonNull Map<String, Object> map) {
      MediaInfo pigeonResult = new MediaInfo();
      Object contentId = map.get("contentId");
      pigeonResult.setContentId((String)contentId);
      Object streamType = map.get("streamType");
      pigeonResult.setStreamType(streamType == null ? null : StreamType.values()[(int)streamType]);
      Object contentType = map.get("contentType");
      pigeonResult.setContentType((String)contentType);
      Object mediaMetadata = map.get("mediaMetadata");
      pigeonResult.setMediaMetadata((mediaMetadata == null) ? null : MediaMetadata.fromMap((Map)mediaMetadata));
      Object mediaTracks = map.get("mediaTracks");
      pigeonResult.setMediaTracks((List<MediaTrack>)mediaTracks);
      Object streamDuration = map.get("streamDuration");
      pigeonResult.setStreamDuration((streamDuration == null) ? null : ((streamDuration instanceof Integer) ? (Integer)streamDuration : (Long)streamDuration));
      Object adBreakClips = map.get("adBreakClips");
      pigeonResult.setAdBreakClips((List<AdBreakClipInfo>)adBreakClips);
      Object customDataAsJson = map.get("customDataAsJson");
      pigeonResult.setCustomDataAsJson((String)customDataAsJson);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaMetadata {
    private @Nullable MediaType mediaType;
    public @Nullable MediaType getMediaType() { return mediaType; }
    public void setMediaType(@Nullable MediaType setterArg) {
      this.mediaType = setterArg;
    }

    private @Nullable List<WebImage> webImages;
    public @Nullable List<WebImage> getWebImages() { return webImages; }
    public void setWebImages(@Nullable List<WebImage> setterArg) {
      this.webImages = setterArg;
    }

    public static final class Builder {
      private @Nullable MediaType mediaType;
      public @NonNull Builder setMediaType(@Nullable MediaType setterArg) {
        this.mediaType = setterArg;
        return this;
      }
      private @Nullable List<WebImage> webImages;
      public @NonNull Builder setWebImages(@Nullable List<WebImage> setterArg) {
        this.webImages = setterArg;
        return this;
      }
      public @NonNull MediaMetadata build() {
        MediaMetadata pigeonReturn = new MediaMetadata();
        pigeonReturn.setMediaType(mediaType);
        pigeonReturn.setWebImages(webImages);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("mediaType", mediaType == null ? null : mediaType.index);
      toMapResult.put("webImages", webImages);
      return toMapResult;
    }
    static @NonNull MediaMetadata fromMap(@NonNull Map<String, Object> map) {
      MediaMetadata pigeonResult = new MediaMetadata();
      Object mediaType = map.get("mediaType");
      pigeonResult.setMediaType(mediaType == null ? null : MediaType.values()[(int)mediaType]);
      Object webImages = map.get("webImages");
      pigeonResult.setWebImages((List<WebImage>)webImages);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WebImage {
    private @Nullable String url;
    public @Nullable String getUrl() { return url; }
    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    public static final class Builder {
      private @Nullable String url;
      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }
      public @NonNull WebImage build() {
        WebImage pigeonReturn = new WebImage();
        pigeonReturn.setUrl(url);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      return toMapResult;
    }
    static @NonNull WebImage fromMap(@NonNull Map<String, Object> map) {
      WebImage pigeonResult = new WebImage();
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaTrack {
    private @Nullable Long id;
    public @Nullable Long getId() { return id; }
    public void setId(@Nullable Long setterArg) {
      this.id = setterArg;
    }

    private @Nullable TrackType trackType;
    public @Nullable TrackType getTrackType() { return trackType; }
    public void setTrackType(@Nullable TrackType setterArg) {
      this.trackType = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable TrackSubtype trackSubtype;
    public @Nullable TrackSubtype getTrackSubtype() { return trackSubtype; }
    public void setTrackSubtype(@Nullable TrackSubtype setterArg) {
      this.trackSubtype = setterArg;
    }

    private @Nullable String contentId;
    public @Nullable String getContentId() { return contentId; }
    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable String language;
    public @Nullable String getLanguage() { return language; }
    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    public static final class Builder {
      private @Nullable Long id;
      public @NonNull Builder setId(@Nullable Long setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable TrackType trackType;
      public @NonNull Builder setTrackType(@Nullable TrackType setterArg) {
        this.trackType = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable TrackSubtype trackSubtype;
      public @NonNull Builder setTrackSubtype(@Nullable TrackSubtype setterArg) {
        this.trackSubtype = setterArg;
        return this;
      }
      private @Nullable String contentId;
      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }
      private @Nullable String language;
      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }
      public @NonNull MediaTrack build() {
        MediaTrack pigeonReturn = new MediaTrack();
        pigeonReturn.setId(id);
        pigeonReturn.setTrackType(trackType);
        pigeonReturn.setName(name);
        pigeonReturn.setTrackSubtype(trackSubtype);
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setLanguage(language);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("trackType", trackType == null ? null : trackType.index);
      toMapResult.put("name", name);
      toMapResult.put("trackSubtype", trackSubtype == null ? null : trackSubtype.index);
      toMapResult.put("contentId", contentId);
      toMapResult.put("language", language);
      return toMapResult;
    }
    static @NonNull MediaTrack fromMap(@NonNull Map<String, Object> map) {
      MediaTrack pigeonResult = new MediaTrack();
      Object id = map.get("id");
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id));
      Object trackType = map.get("trackType");
      pigeonResult.setTrackType(trackType == null ? null : TrackType.values()[(int)trackType]);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object trackSubtype = map.get("trackSubtype");
      pigeonResult.setTrackSubtype(trackSubtype == null ? null : TrackSubtype.values()[(int)trackSubtype]);
      Object contentId = map.get("contentId");
      pigeonResult.setContentId((String)contentId);
      Object language = map.get("language");
      pigeonResult.setLanguage((String)language);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaStatus {
    private @Nullable PlayerState playerState;
    public @Nullable PlayerState getPlayerState() { return playerState; }
    public void setPlayerState(@Nullable PlayerState setterArg) {
      this.playerState = setterArg;
    }

    private @Nullable Boolean isPlayingAd;
    public @Nullable Boolean getIsPlayingAd() { return isPlayingAd; }
    public void setIsPlayingAd(@Nullable Boolean setterArg) {
      this.isPlayingAd = setterArg;
    }

    private @Nullable MediaInfo mediaInfo;
    public @Nullable MediaInfo getMediaInfo() { return mediaInfo; }
    public void setMediaInfo(@Nullable MediaInfo setterArg) {
      this.mediaInfo = setterArg;
    }

    private @Nullable AdBreakStatus adBreakStatus;
    public @Nullable AdBreakStatus getAdBreakStatus() { return adBreakStatus; }
    public void setAdBreakStatus(@Nullable AdBreakStatus setterArg) {
      this.adBreakStatus = setterArg;
    }

    public static final class Builder {
      private @Nullable PlayerState playerState;
      public @NonNull Builder setPlayerState(@Nullable PlayerState setterArg) {
        this.playerState = setterArg;
        return this;
      }
      private @Nullable Boolean isPlayingAd;
      public @NonNull Builder setIsPlayingAd(@Nullable Boolean setterArg) {
        this.isPlayingAd = setterArg;
        return this;
      }
      private @Nullable MediaInfo mediaInfo;
      public @NonNull Builder setMediaInfo(@Nullable MediaInfo setterArg) {
        this.mediaInfo = setterArg;
        return this;
      }
      private @Nullable AdBreakStatus adBreakStatus;
      public @NonNull Builder setAdBreakStatus(@Nullable AdBreakStatus setterArg) {
        this.adBreakStatus = setterArg;
        return this;
      }
      public @NonNull MediaStatus build() {
        MediaStatus pigeonReturn = new MediaStatus();
        pigeonReturn.setPlayerState(playerState);
        pigeonReturn.setIsPlayingAd(isPlayingAd);
        pigeonReturn.setMediaInfo(mediaInfo);
        pigeonReturn.setAdBreakStatus(adBreakStatus);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("playerState", playerState == null ? null : playerState.index);
      toMapResult.put("isPlayingAd", isPlayingAd);
      toMapResult.put("mediaInfo", (mediaInfo == null) ? null : mediaInfo.toMap());
      toMapResult.put("adBreakStatus", (adBreakStatus == null) ? null : adBreakStatus.toMap());
      return toMapResult;
    }
    static @NonNull MediaStatus fromMap(@NonNull Map<String, Object> map) {
      MediaStatus pigeonResult = new MediaStatus();
      Object playerState = map.get("playerState");
      pigeonResult.setPlayerState(playerState == null ? null : PlayerState.values()[(int)playerState]);
      Object isPlayingAd = map.get("isPlayingAd");
      pigeonResult.setIsPlayingAd((Boolean)isPlayingAd);
      Object mediaInfo = map.get("mediaInfo");
      pigeonResult.setMediaInfo((mediaInfo == null) ? null : MediaInfo.fromMap((Map)mediaInfo));
      Object adBreakStatus = map.get("adBreakStatus");
      pigeonResult.setAdBreakStatus((adBreakStatus == null) ? null : AdBreakStatus.fromMap((Map)adBreakStatus));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AdBreakStatus {
    private @Nullable String adBreakId;
    public @Nullable String getAdBreakId() { return adBreakId; }
    public void setAdBreakId(@Nullable String setterArg) {
      this.adBreakId = setterArg;
    }

    private @Nullable String adBreakClipId;
    public @Nullable String getAdBreakClipId() { return adBreakClipId; }
    public void setAdBreakClipId(@Nullable String setterArg) {
      this.adBreakClipId = setterArg;
    }

    private @Nullable Long whenSkippableMs;
    public @Nullable Long getWhenSkippableMs() { return whenSkippableMs; }
    public void setWhenSkippableMs(@Nullable Long setterArg) {
      this.whenSkippableMs = setterArg;
    }

    public static final class Builder {
      private @Nullable String adBreakId;
      public @NonNull Builder setAdBreakId(@Nullable String setterArg) {
        this.adBreakId = setterArg;
        return this;
      }
      private @Nullable String adBreakClipId;
      public @NonNull Builder setAdBreakClipId(@Nullable String setterArg) {
        this.adBreakClipId = setterArg;
        return this;
      }
      private @Nullable Long whenSkippableMs;
      public @NonNull Builder setWhenSkippableMs(@Nullable Long setterArg) {
        this.whenSkippableMs = setterArg;
        return this;
      }
      public @NonNull AdBreakStatus build() {
        AdBreakStatus pigeonReturn = new AdBreakStatus();
        pigeonReturn.setAdBreakId(adBreakId);
        pigeonReturn.setAdBreakClipId(adBreakClipId);
        pigeonReturn.setWhenSkippableMs(whenSkippableMs);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("adBreakId", adBreakId);
      toMapResult.put("adBreakClipId", adBreakClipId);
      toMapResult.put("whenSkippableMs", whenSkippableMs);
      return toMapResult;
    }
    static @NonNull AdBreakStatus fromMap(@NonNull Map<String, Object> map) {
      AdBreakStatus pigeonResult = new AdBreakStatus();
      Object adBreakId = map.get("adBreakId");
      pigeonResult.setAdBreakId((String)adBreakId);
      Object adBreakClipId = map.get("adBreakClipId");
      pigeonResult.setAdBreakClipId((String)adBreakClipId);
      Object whenSkippableMs = map.get("whenSkippableMs");
      pigeonResult.setWhenSkippableMs((whenSkippableMs == null) ? null : ((whenSkippableMs instanceof Integer) ? (Integer)whenSkippableMs : (Long)whenSkippableMs));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AdBreakClipInfo {
    private @Nullable String id;
    public @Nullable String getId() { return id; }
    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String contentId;
    public @Nullable String getContentId() { return contentId; }
    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable String contentUrl;
    public @Nullable String getContentUrl() { return contentUrl; }
    public void setContentUrl(@Nullable String setterArg) {
      this.contentUrl = setterArg;
    }

    private @Nullable String clickThroughUrl;
    public @Nullable String getClickThroughUrl() { return clickThroughUrl; }
    public void setClickThroughUrl(@Nullable String setterArg) {
      this.clickThroughUrl = setterArg;
    }

    private @Nullable Long durationMs;
    public @Nullable Long getDurationMs() { return durationMs; }
    public void setDurationMs(@Nullable Long setterArg) {
      this.durationMs = setterArg;
    }

    private @Nullable String imageUrl;
    public @Nullable String getImageUrl() { return imageUrl; }
    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String mimeType;
    public @Nullable String getMimeType() { return mimeType; }
    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable Long whenSkippableMs;
    public @Nullable Long getWhenSkippableMs() { return whenSkippableMs; }
    public void setWhenSkippableMs(@Nullable Long setterArg) {
      this.whenSkippableMs = setterArg;
    }

    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String contentId;
      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }
      private @Nullable String contentUrl;
      public @NonNull Builder setContentUrl(@Nullable String setterArg) {
        this.contentUrl = setterArg;
        return this;
      }
      private @Nullable String clickThroughUrl;
      public @NonNull Builder setClickThroughUrl(@Nullable String setterArg) {
        this.clickThroughUrl = setterArg;
        return this;
      }
      private @Nullable Long durationMs;
      public @NonNull Builder setDurationMs(@Nullable Long setterArg) {
        this.durationMs = setterArg;
        return this;
      }
      private @Nullable String imageUrl;
      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }
      private @Nullable String mimeType;
      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }
      private @Nullable Long whenSkippableMs;
      public @NonNull Builder setWhenSkippableMs(@Nullable Long setterArg) {
        this.whenSkippableMs = setterArg;
        return this;
      }
      public @NonNull AdBreakClipInfo build() {
        AdBreakClipInfo pigeonReturn = new AdBreakClipInfo();
        pigeonReturn.setId(id);
        pigeonReturn.setTitle(title);
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setContentUrl(contentUrl);
        pigeonReturn.setClickThroughUrl(clickThroughUrl);
        pigeonReturn.setDurationMs(durationMs);
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setWhenSkippableMs(whenSkippableMs);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("title", title);
      toMapResult.put("contentId", contentId);
      toMapResult.put("contentUrl", contentUrl);
      toMapResult.put("clickThroughUrl", clickThroughUrl);
      toMapResult.put("durationMs", durationMs);
      toMapResult.put("imageUrl", imageUrl);
      toMapResult.put("mimeType", mimeType);
      toMapResult.put("whenSkippableMs", whenSkippableMs);
      return toMapResult;
    }
    static @NonNull AdBreakClipInfo fromMap(@NonNull Map<String, Object> map) {
      AdBreakClipInfo pigeonResult = new AdBreakClipInfo();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object contentId = map.get("contentId");
      pigeonResult.setContentId((String)contentId);
      Object contentUrl = map.get("contentUrl");
      pigeonResult.setContentUrl((String)contentUrl);
      Object clickThroughUrl = map.get("clickThroughUrl");
      pigeonResult.setClickThroughUrl((String)clickThroughUrl);
      Object durationMs = map.get("durationMs");
      pigeonResult.setDurationMs((durationMs == null) ? null : ((durationMs instanceof Integer) ? (Integer)durationMs : (Long)durationMs));
      Object imageUrl = map.get("imageUrl");
      pigeonResult.setImageUrl((String)imageUrl);
      Object mimeType = map.get("mimeType");
      pigeonResult.setMimeType((String)mimeType);
      Object whenSkippableMs = map.get("whenSkippableMs");
      pigeonResult.setWhenSkippableMs((whenSkippableMs == null) ? null : ((whenSkippableMs instanceof Integer) ? (Integer)whenSkippableMs : (Long)whenSkippableMs));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaQueueItem {
    private @Nullable Long itemId;
    public @Nullable Long getItemId() { return itemId; }
    public void setItemId(@Nullable Long setterArg) {
      this.itemId = setterArg;
    }

    private @Nullable Double playbackDuration;
    public @Nullable Double getPlaybackDuration() { return playbackDuration; }
    public void setPlaybackDuration(@Nullable Double setterArg) {
      this.playbackDuration = setterArg;
    }

    private @Nullable Double startTime;
    public @Nullable Double getStartTime() { return startTime; }
    public void setStartTime(@Nullable Double setterArg) {
      this.startTime = setterArg;
    }

    private @Nullable MediaInfo media;
    public @Nullable MediaInfo getMedia() { return media; }
    public void setMedia(@Nullable MediaInfo setterArg) {
      this.media = setterArg;
    }

    private @Nullable Boolean autoplay;
    public @Nullable Boolean getAutoplay() { return autoplay; }
    public void setAutoplay(@Nullable Boolean setterArg) {
      this.autoplay = setterArg;
    }

    private @Nullable Double preloadTime;
    public @Nullable Double getPreloadTime() { return preloadTime; }
    public void setPreloadTime(@Nullable Double setterArg) {
      this.preloadTime = setterArg;
    }

    public static final class Builder {
      private @Nullable Long itemId;
      public @NonNull Builder setItemId(@Nullable Long setterArg) {
        this.itemId = setterArg;
        return this;
      }
      private @Nullable Double playbackDuration;
      public @NonNull Builder setPlaybackDuration(@Nullable Double setterArg) {
        this.playbackDuration = setterArg;
        return this;
      }
      private @Nullable Double startTime;
      public @NonNull Builder setStartTime(@Nullable Double setterArg) {
        this.startTime = setterArg;
        return this;
      }
      private @Nullable MediaInfo media;
      public @NonNull Builder setMedia(@Nullable MediaInfo setterArg) {
        this.media = setterArg;
        return this;
      }
      private @Nullable Boolean autoplay;
      public @NonNull Builder setAutoplay(@Nullable Boolean setterArg) {
        this.autoplay = setterArg;
        return this;
      }
      private @Nullable Double preloadTime;
      public @NonNull Builder setPreloadTime(@Nullable Double setterArg) {
        this.preloadTime = setterArg;
        return this;
      }
      public @NonNull MediaQueueItem build() {
        MediaQueueItem pigeonReturn = new MediaQueueItem();
        pigeonReturn.setItemId(itemId);
        pigeonReturn.setPlaybackDuration(playbackDuration);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setMedia(media);
        pigeonReturn.setAutoplay(autoplay);
        pigeonReturn.setPreloadTime(preloadTime);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("playbackDuration", playbackDuration);
      toMapResult.put("startTime", startTime);
      toMapResult.put("media", (media == null) ? null : media.toMap());
      toMapResult.put("autoplay", autoplay);
      toMapResult.put("preloadTime", preloadTime);
      return toMapResult;
    }
    static @NonNull MediaQueueItem fromMap(@NonNull Map<String, Object> map) {
      MediaQueueItem pigeonResult = new MediaQueueItem();
      Object itemId = map.get("itemId");
      pigeonResult.setItemId((itemId == null) ? null : ((itemId instanceof Integer) ? (Integer)itemId : (Long)itemId));
      Object playbackDuration = map.get("playbackDuration");
      pigeonResult.setPlaybackDuration((Double)playbackDuration);
      Object startTime = map.get("startTime");
      pigeonResult.setStartTime((Double)startTime);
      Object media = map.get("media");
      pigeonResult.setMedia((media == null) ? null : MediaInfo.fromMap((Map)media));
      Object autoplay = map.get("autoplay");
      pigeonResult.setAutoplay((Boolean)autoplay);
      Object preloadTime = map.get("preloadTime");
      pigeonResult.setPreloadTime((Double)preloadTime);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CastDevice {
    private @Nullable String deviceId;
    public @Nullable String getDeviceId() { return deviceId; }
    public void setDeviceId(@Nullable String setterArg) {
      this.deviceId = setterArg;
    }

    private @Nullable String friendlyName;
    public @Nullable String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable String modelName;
    public @Nullable String getModelName() { return modelName; }
    public void setModelName(@Nullable String setterArg) {
      this.modelName = setterArg;
    }

    public static final class Builder {
      private @Nullable String deviceId;
      public @NonNull Builder setDeviceId(@Nullable String setterArg) {
        this.deviceId = setterArg;
        return this;
      }
      private @Nullable String friendlyName;
      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }
      private @Nullable String modelName;
      public @NonNull Builder setModelName(@Nullable String setterArg) {
        this.modelName = setterArg;
        return this;
      }
      public @NonNull CastDevice build() {
        CastDevice pigeonReturn = new CastDevice();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setModelName(modelName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceId", deviceId);
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("modelName", modelName);
      return toMapResult;
    }
    static @NonNull CastDevice fromMap(@NonNull Map<String, Object> map) {
      CastDevice pigeonResult = new CastDevice();
      Object deviceId = map.get("deviceId");
      pigeonResult.setDeviceId((String)deviceId);
      Object friendlyName = map.get("friendlyName");
      pigeonResult.setFriendlyName((String)friendlyName);
      Object modelName = map.get("modelName");
      pigeonResult.setModelName((String)modelName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CastMessage {
    private @Nullable String namespace;
    public @Nullable String getNamespace() { return namespace; }
    public void setNamespace(@Nullable String setterArg) {
      this.namespace = setterArg;
    }

    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    public static final class Builder {
      private @Nullable String namespace;
      public @NonNull Builder setNamespace(@Nullable String setterArg) {
        this.namespace = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull CastMessage build() {
        CastMessage pigeonReturn = new CastMessage();
        pigeonReturn.setNamespace(namespace);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("namespace", namespace);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static @NonNull CastMessage fromMap(@NonNull Map<String, Object> map) {
      CastMessage pigeonResult = new CastMessage();
      Object namespace = map.get("namespace");
      pigeonResult.setNamespace((String)namespace);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }
  private static class CastHostApiCodec extends StandardMessageCodec {
    public static final CastHostApiCodec INSTANCE = new CastHostApiCodec();
    private CastHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AdBreakClipInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CastDevice.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CastMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MediaInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MediaLoadRequestData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MediaMetadata.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return MediaQueueItem.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return MediaTrack.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return WebImage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AdBreakClipInfo) {
        stream.write(128);
        writeValue(stream, ((AdBreakClipInfo) value).toMap());
      } else 
      if (value instanceof CastDevice) {
        stream.write(129);
        writeValue(stream, ((CastDevice) value).toMap());
      } else 
      if (value instanceof CastMessage) {
        stream.write(130);
        writeValue(stream, ((CastMessage) value).toMap());
      } else 
      if (value instanceof MediaInfo) {
        stream.write(131);
        writeValue(stream, ((MediaInfo) value).toMap());
      } else 
      if (value instanceof MediaLoadRequestData) {
        stream.write(132);
        writeValue(stream, ((MediaLoadRequestData) value).toMap());
      } else 
      if (value instanceof MediaMetadata) {
        stream.write(133);
        writeValue(stream, ((MediaMetadata) value).toMap());
      } else 
      if (value instanceof MediaQueueItem) {
        stream.write(134);
        writeValue(stream, ((MediaQueueItem) value).toMap());
      } else 
      if (value instanceof MediaTrack) {
        stream.write(135);
        writeValue(stream, ((MediaTrack) value).toMap());
      } else 
      if (value instanceof WebImage) {
        stream.write(136);
        writeValue(stream, ((WebImage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CastHostApi {
    void sendMessage(@NonNull CastMessage message);
    void showCastDialog();
    void setMute(@NonNull Boolean muted);
    @NonNull CastDevice getCastDevice();
    void loadMediaLoadRequestData(@NonNull MediaLoadRequestData request);
    @NonNull MediaInfo getMediaInfo();
    void play();
    void pause();
    void stop();
    void showTracksChooserDialog();
    void skipAd();
    void queueAppendItem(@NonNull MediaQueueItem item);
    void queueNextItem();
    void queuePrevItem();
    @NonNull Long getQueueItemCount();
    @NonNull MediaQueueItem getQueueItemAtIndex(@NonNull Long index);

    /** The codec used by CastHostApi. */
    static MessageCodec<Object> getCodec() {
      return CastHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `CastHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CastHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CastMessage messageArg = (CastMessage)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.sendMessage(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.showCastDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.showCastDialog();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.setMute", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean mutedArg = (Boolean)args.get(0);
              if (mutedArg == null) {
                throw new NullPointerException("mutedArg unexpectedly null.");
              }
              api.setMute(mutedArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getCastDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              CastDevice output = api.getCastDevice();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.loadMediaLoadRequestData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              MediaLoadRequestData requestArg = (MediaLoadRequestData)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.loadMediaLoadRequestData(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getMediaInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              MediaInfo output = api.getMediaInfo();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.play();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.pause();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stop();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.showTracksChooserDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.showTracksChooserDialog();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.skipAd", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.skipAd();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.queueAppendItem", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              MediaQueueItem itemArg = (MediaQueueItem)args.get(0);
              if (itemArg == null) {
                throw new NullPointerException("itemArg unexpectedly null.");
              }
              api.queueAppendItem(itemArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.queueNextItem", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.queueNextItem();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.queuePrevItem", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.queuePrevItem();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getQueueItemCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getQueueItemCount();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getQueueItemAtIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              MediaQueueItem output = api.getQueueItemAtIndex((indexArg == null) ? null : indexArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CastFlutterApiCodec extends StandardMessageCodec {
    public static final CastFlutterApiCodec INSTANCE = new CastFlutterApiCodec();
    private CastFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AdBreakClipInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AdBreakStatus.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CastMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MediaInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MediaMetadata.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MediaStatus.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return MediaTrack.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return WebImage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AdBreakClipInfo) {
        stream.write(128);
        writeValue(stream, ((AdBreakClipInfo) value).toMap());
      } else 
      if (value instanceof AdBreakStatus) {
        stream.write(129);
        writeValue(stream, ((AdBreakStatus) value).toMap());
      } else 
      if (value instanceof CastMessage) {
        stream.write(130);
        writeValue(stream, ((CastMessage) value).toMap());
      } else 
      if (value instanceof MediaInfo) {
        stream.write(131);
        writeValue(stream, ((MediaInfo) value).toMap());
      } else 
      if (value instanceof MediaMetadata) {
        stream.write(132);
        writeValue(stream, ((MediaMetadata) value).toMap());
      } else 
      if (value instanceof MediaStatus) {
        stream.write(133);
        writeValue(stream, ((MediaStatus) value).toMap());
      } else 
      if (value instanceof MediaTrack) {
        stream.write(134);
        writeValue(stream, ((MediaTrack) value).toMap());
      } else 
      if (value instanceof WebImage) {
        stream.write(135);
        writeValue(stream, ((WebImage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class CastFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public CastFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return CastFlutterApiCodec.INSTANCE;
    }

    public void getSessionMessageNamespaces(Reply<List<String>> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.getSessionMessageNamespaces", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        List<String> output = (List<String>)channelReply;
        callback.reply(output);
      });
    }
    public void onCastStateChanged(@NonNull Long castStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onCastStateChanged", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(castStateArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMessageReceived(@NonNull CastMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMessageReceived", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarting(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarting", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarted", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStartFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStartFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionEnding(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnding", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionEnded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnded", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResuming(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResuming", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumeFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumeFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionSuspended(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionSuspended", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onStatusUpdated(@NonNull MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onStatusUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(mediaStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMetadataUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMetadataUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onQueueStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onQueueStatusUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onPreloadStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onPreloadStatusUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSendingRemoteMediaRequest(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSendingRemoteMediaRequest", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onAdBreakStatusUpdated(@NonNull MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakStatusUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(mediaStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMediaError(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMediaError", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onProgressUpdated(@NonNull Long progressMsArg, @NonNull Long durationMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onProgressUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(progressMsArg, durationMsArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onAdBreakClipProgressUpdated(@NonNull String adBreakIdArg, @NonNull String adBreakClipIdArg, @NonNull Long progressMsArg, @NonNull Long durationMsArg, @NonNull Long whenSkippableMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakClipProgressUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(adBreakIdArg, adBreakClipIdArg, progressMsArg, durationMsArg, whenSkippableMsArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void itemsInsertedInRange(@NonNull Long insertIndexArg, @NonNull Long insertCountArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsInsertedInRange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(insertIndexArg, insertCountArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void itemsReloaded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsReloaded", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void itemsRemovedAtIndexes(@NonNull List<Long> indexesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsRemovedAtIndexes", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(indexesArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void itemsReorderedAtIndexes(@NonNull List<Long> indexesArg, @NonNull Long insertBeforeIndexArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsReorderedAtIndexes", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(indexesArg, insertBeforeIndexArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void itemsUpdatedAtIndexes(@NonNull List<Long> indexesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsUpdatedAtIndexes", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(indexesArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void mediaQueueChanged(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.mediaQueueChanged", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void mediaQueueWillChange(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.mediaQueueWillChange", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
